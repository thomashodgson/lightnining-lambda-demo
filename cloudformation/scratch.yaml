Resources:
  lightninglambdasuserexportereventsbucketscratch462FF23F:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "lightning-lambdas-userexporter-eventsbucket-scratch"
    DeletionPolicy: "Retain"
  lightninglambdasuserexportereventsbucketscratchNotificationsFDB71039:
    Type: "Custom::S3BucketNotifications"
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691"
        - "Arn"
      BucketName:
        Ref: "lightninglambdasuserexportereventsbucketscratch462FF23F"
      NotificationConfiguration:
        LambdaFunctionConfigurations:
        - Events:
          - "s3:ObjectCreated:*"
          LambdaFunctionArn:
            Fn::GetAtt:
            - "lightninglambdasuserexporterlambdascratch34500FD3"
            - "Arn"
    DependsOn:
    - "lightninglambdasuserexporterlambdascratchAllowBucketNotificationsFromlightninglambdasuserexporterstackscratchlightninglambdasuserexportereventsbucketscratch5CDFF9EEB62016CB"
  lightninglambdasuserexporterusersbucketscratch068E9DB1:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "lightning-lambdas-userexporter-usersbucket-scratch"
    DeletionPolicy: "Retain"
  lightninglambdasuserexporteruserstablescratchD63FC5FC:
    Type: "AWS::DynamoDB::Table"
    Properties:
      KeySchema:
      - AttributeName: "id"
        KeyType: "HASH"
      AttributeDefinitions:
      - AttributeName: "id"
        AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "lightning-lambdas-userexporter-userstable-scratch"
    DeletionPolicy: "Retain"
  lightninglambdasuserexporterlambdascratchServiceRole1F9F5199:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service:
              Fn::Join:
              - ""
              - - "lambda."
                - Ref: "AWS::URLSuffix"
        Version: "2012-10-17"
      ManagedPolicyArns:
      - Fn::Join:
        - ""
        - - "arn:"
          - Ref: "AWS::Partition"
          - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  lightninglambdasuserexporterlambdascratchServiceRoleDefaultPolicyAE1100FB:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - "s3:GetObject*"
          - "s3:GetBucket*"
          - "s3:List*"
          Effect: "Allow"
          Resource:
          - Fn::GetAtt:
            - "lightninglambdasuserexportereventsbucketscratch462FF23F"
            - "Arn"
          - Fn::Join:
            - ""
            - - Fn::GetAtt:
                - "lightninglambdasuserexportereventsbucketscratch462FF23F"
                - "Arn"
              - "/*"
        - Action:
          - "s3:PutObject*"
          - "s3:Abort*"
          Effect: "Allow"
          Resource:
            Fn::Join:
            - ""
            - - Fn::GetAtt:
                - "lightninglambdasuserexportereventsbucketscratch462FF23F"
                - "Arn"
              - "/*"
        - Action:
          - "s3:GetObject*"
          - "s3:GetBucket*"
          - "s3:List*"
          Effect: "Allow"
          Resource:
          - Fn::GetAtt:
            - "lightninglambdasuserexporterusersbucketscratch068E9DB1"
            - "Arn"
          - Fn::Join:
            - ""
            - - Fn::GetAtt:
                - "lightninglambdasuserexporterusersbucketscratch068E9DB1"
                - "Arn"
              - "/*"
        - Action:
          - "s3:PutObject*"
          - "s3:Abort*"
          Effect: "Allow"
          Resource:
            Fn::Join:
            - ""
            - - Fn::GetAtt:
                - "lightninglambdasuserexporterusersbucketscratch068E9DB1"
                - "Arn"
              - "/*"
        - Action:
          - "dynamodb:BatchGetItem"
          - "dynamodb:GetRecords"
          - "dynamodb:GetShardIterator"
          - "dynamodb:Query"
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
          Effect: "Allow"
          Resource:
          - Fn::GetAtt:
            - "lightninglambdasuserexporteruserstablescratchD63FC5FC"
            - "Arn"
          - Ref: "AWS::NoValue"
        Version: "2012-10-17"
      PolicyName: "lightninglambdasuserexporterlambdascratchServiceRoleDefaultPolicyAE1100FB"
      Roles:
      - Ref: "lightninglambdasuserexporterlambdascratchServiceRole1F9F5199"
  lightninglambdasuserexporterlambdascratch34500FD3:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: "flowbro-code"
        S3Key: "UserExporter/UserExporter-1.0-SNAPSHOT.jar"
      Handler: "com.lightning.lambdas.startup.S3Lambda::handleRequest"
      Role:
        Fn::GetAtt:
        - "lightninglambdasuserexporterlambdascratchServiceRole1F9F5199"
        - "Arn"
      Runtime: "java8"
      Description: "Main lambda for UserExporter"
      Environment:
        Variables:
          scratch_usersTable_tableName:
            Ref: "lightninglambdasuserexporteruserstablescratchD63FC5FC"
          Environment: "scratch"
          scratch_usersTable_region: "eu-west-2"
          scratch_usersTable_idFieldName: "id"
          scratch_usersBucket_bucketName:
            Ref: "lightninglambdasuserexporterusersbucketscratch068E9DB1"
      FunctionName: "lightning-lambdas-userexporter-lambda-scratch"
      MemorySize: 256
      Timeout: 300
    DependsOn:
    - "lightninglambdasuserexporterlambdascratchServiceRoleDefaultPolicyAE1100FB"
    - "lightninglambdasuserexporterlambdascratchServiceRole1F9F5199"
  ? lightninglambdasuserexporterlambdascratchAllowBucketNotificationsFromlightninglambdasuserexporterstackscratchlightninglambdasuserexportereventsbucketscratch5CDFF9EEB62016CB
  : Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt:
        - "lightninglambdasuserexporterlambdascratch34500FD3"
        - "Arn"
      Principal: "s3.amazonaws.com"
      SourceAccount:
        Ref: "AWS::AccountId"
      SourceArn:
        Fn::GetAtt:
        - "lightninglambdasuserexportereventsbucketscratch462FF23F"
        - "Arn"
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service:
              Fn::Join:
              - ""
              - - "lambda."
                - Ref: "AWS::URLSuffix"
        Version: "2012-10-17"
      ManagedPolicyArns:
      - Fn::Join:
        - ""
        - - "arn:"
          - Ref: "AWS::Partition"
          - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
        - Action: "s3:PutBucketNotification"
          Effect: "Allow"
          Resource: "*"
        Version: "2012-10-17"
      PolicyName: "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36"
      Roles:
      - Ref: "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "AWS CloudFormation handler for \"Custom::S3BucketNotifications\"\
        \ resources (@aws-cdk/aws-s3)"
      Code:
        ZipFile: "exports.handler = (event, context) => {\n    const s3 = new (require('aws-sdk').S3)();\n\
          \    const https = require(\"https\");\n    const url = require(\"url\"\
          );\n    log(JSON.stringify(event, undefined, 2));\n    const props = event.ResourceProperties;\n\
          \    if (event.RequestType === 'Delete') {\n        props.NotificationConfiguration\
          \ = {}; // this is how you clean out notifications\n    }\n    const req\
          \ = {\n        Bucket: props.BucketName,\n        NotificationConfiguration:\
          \ props.NotificationConfiguration\n    };\n    return s3.putBucketNotificationConfiguration(req,\
          \ (err, data) => {\n        log({ err, data });\n        if (err) {\n  \
          \          return submitResponse(\"FAILED\", err.message + `\\nMore information\
          \ in CloudWatch Log Stream: ${context.logStreamName}`);\n        }\n   \
          \     else {\n            return submitResponse(\"SUCCESS\");\n        }\n\
          \    });\n    function log(obj) {\n        console.error(event.RequestId,\
          \ event.StackId, event.LogicalResourceId, obj);\n    }\n    // tslint:disable-next-line:max-line-length\n\
          \    // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule\n\
          \    // to allow sending an error messge as a reason.\n    function submitResponse(responseStatus,\
          \ reason) {\n        const responseBody = JSON.stringify({\n           \
          \ Status: responseStatus,\n            Reason: reason || \"See the details\
          \ in CloudWatch Log Stream: \" + context.logStreamName,\n            PhysicalResourceId:\
          \ context.logStreamName,\n            StackId: event.StackId,\n        \
          \    RequestId: event.RequestId,\n            LogicalResourceId: event.LogicalResourceId,\n\
          \            NoEcho: false,\n        });\n        log({ responseBody });\n\
          \        const parsedUrl = url.parse(event.ResponseURL);\n        const\
          \ options = {\n            hostname: parsedUrl.hostname,\n            port:\
          \ 443,\n            path: parsedUrl.path,\n            method: \"PUT\",\n\
          \            headers: {\n                \"content-type\": \"\",\n     \
          \           \"content-length\": responseBody.length\n            }\n   \
          \     };\n        const request = https.request(options, (r) => {\n    \
          \        log({ statusCode: r.statusCode, statusMessage: r.statusMessage\
          \ });\n            context.done();\n        });\n        request.on(\"error\"\
          , (error) => {\n            log({ sendError: error });\n            context.done();\n\
          \        });\n        request.write(responseBody);\n        request.end();\n\
          \    }\n};"
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
        - "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
        - "Arn"
      Runtime: "nodejs8.10"
      Timeout: 300
